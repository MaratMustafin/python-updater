#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–æ–∫ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Python Updater
"""

import os
from pathlib import Path

try:
    from PIL import Image, ImageDraw, ImageFont
    PIL_AVAILABLE = True
except ImportError:
    PIL_AVAILABLE = False

def create_app_icon():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    if not PIL_AVAILABLE:
        print("‚ùå PIL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install Pillow")
        return False
    
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 1024x1024 –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    size = 1024
    img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
    draw = ImageDraw.Draw(img)
    
    # –°–æ–∑–¥–∞–µ–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
    for y in range(size):
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç –æ—Ç —Å–∏–Ω–µ–≥–æ –∫ –≥–æ–ª—É–±–æ–º—É
        blue_value = int(70 + (180 - 70) * y / size)
        color = (70, 130, blue_value, 255)
        draw.line([(0, y), (size, y)], fill=color)
    
    # –†–∏—Å—É–µ–º –≤–Ω–µ—à–Ω–∏–π –∫—Ä—É–≥
    margin = 80
    draw.ellipse([margin, margin, size-margin, size-margin], 
                fill=(100, 149, 237, 255), outline=(255, 255, 255, 255), width=12)
    
    # –†–∏—Å—É–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫—Ä—É–≥ –¥–ª—è –æ–±—ä–µ–º–∞
    inner_margin = 140
    draw.ellipse([inner_margin, inner_margin, size-inner_margin, size-inner_margin], 
                fill=(135, 206, 250, 200), outline=(255, 255, 255, 150), width=6)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç PU
    try:
        if os.name == 'nt':
            # Windows
            font_paths = [
                "C:/Windows/Fonts/arial.ttf",
                "C:/Windows/Fonts/calibri.ttf",
                "C:/Windows/Fonts/segoeui.ttf"
            ]
            font = None
            for font_path in font_paths:
                if os.path.exists(font_path):
                    font = ImageFont.truetype(font_path, 200)
                    break
        else:
            # Linux/macOS
            font_paths = [
                "/usr/share/fonts/truetype/dejavu/DejaVuSans-Bold.ttf",
                "/System/Library/Fonts/Helvetica.ttc",
                "/usr/share/fonts/TTF/arial.ttf"
            ]
            font = None
            for font_path in font_paths:
                if os.path.exists(font_path):
                    font = ImageFont.truetype(font_path, 200)
                    break
        
        if font is None:
            font = ImageFont.load_default()
            
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —à—Ä–∏—Ñ—Ç: {e}")
        font = ImageFont.load_default()
    
    text = "PU"
    bbox = draw.textbbox((0, 0), text, font=font)
    text_width = bbox[2] - bbox[0]
    text_height = bbox[3] - bbox[1]
    
    x = (size - text_width) // 2
    y = (size - text_height) // 2 - 30
    
    # –¢–µ–Ω—å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–±—ä–µ–º–∞
    shadow_offset = 8
    draw.text((x + shadow_offset, y + shadow_offset), text, fill=(0, 0, 0, 180), font=font)
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    draw.text((x, y), text, fill=(255, 255, 255, 255), font=font)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–æ–π –∑–Ω–∞—á–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å—Ç—Ä–µ–ª–∫–∞ –≤–Ω–∏–∑)
    arrow_size = 60
    arrow_x = size - 150
    arrow_y = size - 150
    
    # –†–∏—Å—É–µ–º —Å—Ç—Ä–µ–ª–∫—É –≤–Ω–∏–∑
    arrow_points = [
        (arrow_x, arrow_y),
        (arrow_x + arrow_size, arrow_y),
        (arrow_x + arrow_size//2, arrow_y + arrow_size)
    ]
    draw.polygon(arrow_points, fill=(255, 255, 255, 200))
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–∫–æ–Ω–∫—É
    img.save('icon.png', 'PNG')
    
    # –°–æ–∑–¥–∞–µ–º ICO –¥–ª—è Windows (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–º–µ—Ä–æ–≤)
    icon_sizes = [16, 24, 32, 48, 64, 128, 256]
    icons = []
    
    for icon_size in icon_sizes:
        icon_img = img.resize((icon_size, icon_size), Image.Resampling.LANCZOS)
        icons.append(icon_img)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ ICO
    icons[0].save('icon.ico', format='ICO', sizes=[(s, s) for s in icon_sizes])
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω—ã –∏–∫–æ–Ω–∫–∏:")
    print("  üì± icon.png (1024x1024)")
    print("  ü™ü icon.ico (–º—É–ª—å—Ç–∏-—Ä–∞–∑–º–µ—Ä –¥–ª—è Windows)")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
    png_size = os.path.getsize('icon.png') / 1024
    ico_size = os.path.getsize('icon.ico') / 1024
    print(f"  üìä –†–∞–∑–º–µ—Ä—ã: PNG {png_size:.1f}KB, ICO {ico_size:.1f}KB")
    
    return True

def create_macos_icns():
    """–°–æ–∑–¥–∞–Ω–∏–µ ICNS –∏–∫–æ–Ω–∫–∏ –¥–ª—è macOS (–±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –≤ GitHub Actions)"""
    print("‚ÑπÔ∏è  ICNS –∏–∫–æ–Ω–∫–∞ –¥–ª—è macOS –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ GitHub Actions")
    return True

if __name__ == "__main__":
    print("üé® Python Updater - –°–æ–∑–¥–∞–Ω–∏–µ –∏–∫–æ–Ω–æ–∫")
    print("=" * 50)
    
    success = create_app_icon()
    create_macos_icns()
    
    if success:
        print("\nüéâ –ò–∫–æ–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        print("üìã –ì–æ—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã:")
        
        files = ['icon.png', 'icon.ico']
        for file in files:
            if os.path.exists(file):
                size = os.path.getsize(file) / 1024
                print(f"  ‚úÖ {file} ({size:.1f}KB)")
            else:
                print(f"  ‚ùå {file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–±–∏—Ä–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∫–æ–Ω–æ–∫")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Pillow: pip install Pillow")
