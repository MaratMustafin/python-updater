name: üöÄ Build Python Updater

# –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è GITHUB_TOKEN
permissions:
  contents: write
  packages: write
  actions: read

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Type of build'
        required: true
        default: 'release'
        type: choice
        options:
        - release
        - debug

jobs:
  build-windows:
    name: ü™ü Windows Build
    runs-on: windows-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: üî® Build CustomTkinter version
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ translations.json, —Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç
        if (-not (Test-Path "translations.json")) {
          '{"ru":{"title":"Python Updater"},"en":{"title":"Python Updater"}}' | Out-File -FilePath "translations.json" -Encoding UTF8
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ version_info.txt, —Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç
        if (-not (Test-Path "version_info.txt")) {
          @"
VSVersionInfo(
  ffi=FixedFileInfo(
    filevers=(1, 0, 0, 0),
    prodvers=(1, 0, 0, 0),
    mask=0x3f,
    flags=0x0,
    OS=0x4,
    fileType=0x1,
    subtype=0x0,
    date=(0, 0)
  ),
  kids=[
    StringFileInfo([
      StringTable(u'040904B0', [
        StringStruct(u'CompanyName', u'Python Updater'),
        StringStruct(u'FileDescription', u'Python Updater - Modern application updater'),
        StringStruct(u'FileVersion', u'1.0.0.0'),
        StringStruct(u'ProductName', u'Python Updater'),
        StringStruct(u'ProductVersion', u'1.0.0.0')
      ])
    ]),
    VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
  ]
)
"@ | Out-File -FilePath "version_info.txt" -Encoding UTF8
        }
        
        pyinstaller build.spec
      
    - name: üìã List built files
      run: |
        echo "Built files:"
        Get-ChildItem -Path dist\ -Recurse | Select-Object Name, Length
        
    - name: üì§ Upload Windows artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-builds
        path: |
          dist/*.exe
        retention-days: 30

  build-macos:
    name: üçé macOS Build
    runs-on: macos-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: üé® Create icon for macOS
      run: |
        python3 -c "
        from PIL import Image, ImageDraw, ImageFont
        import os
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—É—é –∏–∫–æ–Ω–∫—É
        img = Image.new('RGBA', (1024, 1024), (70, 130, 180, 255))
        draw = ImageDraw.Draw(img)
        
        # –†–∏—Å—É–µ–º –∫—Ä—É–≥
        margin = 100
        draw.ellipse([margin, margin, 1024-margin, 1024-margin], 
                    fill=(100, 149, 237, 255), outline=(255, 255, 255, 255), width=20)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
        try:
            font = ImageFont.truetype('/System/Library/Fonts/Helvetica.ttc', 200)
        except:
            font = ImageFont.load_default()
        
        text = 'PU'
        bbox = draw.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        
        x = (1024 - text_width) // 2
        y = (1024 - text_height) // 2 - 50
        
        draw.text((x, y), text, fill=(255, 255, 255, 255), font=font)
        img.save('icon.png', 'PNG')
        "
        
        # –°–æ–∑–¥–∞–µ–º .icns –∏–∫–æ–Ω–∫—É
        mkdir -p icon.iconset
        for size in 16 32 64 128 256 512 1024; do
          sips -z $size $size icon.png --out icon.iconset/icon_${size}x${size}.png
        done
        iconutil -c icns icon.iconset
        rm -rf icon.iconset icon.png
      continue-on-error: true
        
    - name: üî® Build CustomTkinter version for macOS
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ translations.json, —Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç
        if [ ! -f "translations.json" ]; then
          echo '{"ru":{"title":"Python Updater"},"en":{"title":"Python Updater"}}' > translations.json
        fi
        
        pyinstaller --name "PythonUpdater_CustomTkinter" \
          --windowed \
          --onefile \
          --icon="icon.icns" \
          --add-data "translations.json:." \
          --add-data "README.md:." \
          --hidden-import="customtkinter" \
          --collect-data="customtkinter" \
          --osx-bundle-identifier="com.pythonupdater.customtkinter" \
          main_ctk.py
      
    - name: üìã List built files
      run: |
        echo "Built files:"
        ls -la dist/
        
    - name: üì§ Upload macOS artifacts
      uses: actions/upload-artifact@v4
      with:
        name: macos-builds
        path: |
          dist/*.app
        retention-days: 30

  build-linux:
    name: üêß Linux Build
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üêç Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: üì¶ Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk
        
    - name: üì¶ Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
        
    - name: üî® Build CustomTkinter version for Linux
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ translations.json, —Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç
        if [ ! -f "translations.json" ]; then
          echo '{"ru":{"title":"Python Updater"},"en":{"title":"Python Updater"}}' > translations.json
        fi
        
        pyinstaller --name "PythonUpdater_CustomTkinter_Linux" \
          --onefile \
          --add-data "translations.json:." \
          --add-data "README.md:." \
          --hidden-import="customtkinter" \
          --collect-data="customtkinter" \
          main_ctk.py
      
    - name: üìã List built files
      run: |
        echo "Built files:"
        ls -la dist/
        
    - name: üì§ Upload Linux artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-builds
        path: |
          dist/*
        retention-days: 30

  create-release:
    name: üéâ Create Release
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: üì• Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
        
    - name: üìã List all artifacts
      run: |
        echo "All built artifacts:"
        find artifacts -type f -exec ls -la {} \;
        
    - name: üì¶ Create release archives
      run: |
        cd artifacts
        
        # Windows –∞—Ä—Ö–∏–≤
        if [ -d "windows-builds" ]; then
          cd windows-builds
          zip -r ../PythonUpdater_Windows.zip ./*
          cd ..
        fi
        
        # macOS –∞—Ä—Ö–∏–≤
        if [ -d "macos-builds" ]; then
          cd macos-builds
          tar -czf ../PythonUpdater_macOS.tar.gz ./*
          cd ..
        fi
        
        # Linux –∞—Ä—Ö–∏–≤
        if [ -d "linux-builds" ]; then
          cd linux-builds
          tar -czf ../PythonUpdater_Linux.tar.gz ./*
          cd ..
        fi
        
        ls -la *.zip *.tar.gz
        
    - name: üöÄ Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          artifacts/PythonUpdater_Windows.zip
          artifacts/PythonUpdater_macOS.tar.gz
          artifacts/PythonUpdater_Linux.tar.gz
        name: Python Updater ${{ github.ref_name }}
        body: |
          ## üéâ Python Updater ${{ github.ref_name }}
          
          ### üì¶ –ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:
          
          - **ü™ü Windows**: `PythonUpdater_Windows.zip`
            - PythonUpdater_CTK.exe (CustomTkinter) ‚≠ê
          
          - **üçé macOS**: `PythonUpdater_macOS.tar.gz`
            - PythonUpdater_CustomTkinter.app ‚≠ê
          
          - **üêß Linux**: `PythonUpdater_Linux.tar.gz`
            - PythonUpdater_CustomTkinter_Linux ‚≠ê
          
          ### ‚ú® –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–µ—Ä—Å–∏–∏:
          
          - ‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å CustomTkinter
          - ‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è .reg —Ñ–∞–π–ª–æ–≤ (Windows)
          - ‚úÖ –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å (RU/EN)
          - ‚úÖ –¢—ë–º–Ω–∞—è/—Å–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞
          - ‚úÖ –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–æ—Å—Ç—å
          - ‚úÖ –û—Ç–∫–ª—é—á–µ–Ω UPX –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞–º–∏
          
          ### üõ°Ô∏è –í–∞–∂–Ω–æ –¥–ª—è Windows –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
          
          **–ï—Å–ª–∏ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å –±–ª–æ–∫–∏—Ä—É–µ—Ç —Ñ–∞–π–ª:**
          
          1. **–≠—Ç–æ –ª–æ–∂–Ω–æ–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ** - —Ñ–∞–π–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑–æ–ø–∞—Å–µ–Ω
          2. **–î–æ–±–∞–≤—å—Ç–µ –≤ –∏—Å–∫–ª—é—á–µ–Ω–∏—è** –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞
          3. **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ SHA256 —Ö–µ—à** –¥–ª—è —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          4. **–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥ –æ—Ç–∫—Ä—ã—Ç** –Ω–∞ GitHub –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
          
          üìã [**–ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–∞–º**](https://github.com/MaratMustafin/python-updater/blob/main/WINDOWS_ANTIVIRUS.md)
          
          ### üöÄ –ì–æ—Ç–æ–≤–æ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:
          
          **–ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ª—É—á—à–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –æ–ø—ã—Ç–æ–º!**
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-builds:
    name: üß™ Test Builds
    needs: [build-windows, build-macos, build-linux]
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Download artifacts
      uses: actions/download-artifact@v4
      with:
        path: test-artifacts
        
    - name: üß™ Test artifact integrity
      run: |
        echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–±–æ—Ä–æ–∫..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Windows —Ñ–∞–π–ª—ã
        if [ -d "test-artifacts/windows-builds" ]; then
          echo "‚úÖ Windows —Å–±–æ—Ä–∫–∏ –Ω–∞–π–¥–µ–Ω—ã:"
          ls -la test-artifacts/windows-builds/
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º macOS —Ñ–∞–π–ª—ã
        if [ -d "test-artifacts/macos-builds" ]; then
          echo "‚úÖ macOS —Å–±–æ—Ä–∫–∏ –Ω–∞–π–¥–µ–Ω—ã:"
          ls -la test-artifacts/macos-builds/
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Linux —Ñ–∞–π–ª—ã
        if [ -d "test-artifacts/linux-builds" ]; then
          echo "‚úÖ Linux —Å–±–æ—Ä–∫–∏ –Ω–∞–π–¥–µ–Ω—ã:"
          ls -la test-artifacts/linux-builds/
        fi
        
        echo "üéâ –í—Å–µ —Å–±–æ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!"
