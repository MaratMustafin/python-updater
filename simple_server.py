#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –±–µ–∑ CORS –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

from http.server import HTTPServer, BaseHTTPRequestHandler
import os
import tempfile
import zipfile
import hashlib
from pathlib import Path


class SimpleUpdateServer(BaseHTTPRequestHandler):
    """–ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–µ–∑ CORS"""
    
    def do_GET(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ GET –∑–∞–ø—Ä–æ—Å–æ–≤"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        auth_header = self.headers.get('Authorization')
        if auth_header != 'Bearer test-token-123':
            self.send_response(401)
            self.send_header('Content-Type', 'text/plain')
            self.end_headers()
            self.wfile.write(b'Unauthorized: Invalid token')
            print(f"‚ùå –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {auth_header}")
            return
        
        print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {self.path}")
        
        if self.path == '/version.txt':
            self.send_response(200)
            self.send_header('Content-Type', 'text/plain; charset=utf-8')
            self.end_headers()
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Ä—Å–∏—é 1.0.3 (—á—Ç–æ–±—ã –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
            self.wfile.write('1.0.3'.encode('utf-8'))
            print("üìÑ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è: 1.0.3")
            
        elif self.path == '/myfile.zip':
            zip_path = self.create_test_zip()
            if zip_path and os.path.exists(zip_path):
                file_size = os.path.getsize(zip_path)
                self.send_response(200)
                self.send_header('Content-Type', 'application/zip')
                self.send_header('Content-Length', str(file_size))
                self.end_headers()
                
                with open(zip_path, 'rb') as f:
                    while True:
                        chunk = f.read(8192)
                        if not chunk:
                            break
                        self.wfile.write(chunk)
                
                print(f"üì¶ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω ZIP —Ñ–∞–π–ª: {zip_path} ({file_size} –±–∞–π—Ç)")
            else:
                self.send_response(500)
                self.send_header('Content-Type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'Error creating test ZIP file')
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ZIP —Ñ–∞–π–ª–∞")
                
        elif self.path == '/myfile.zip.sha256':
            zip_path = self.create_test_zip()
            if zip_path and os.path.exists(zip_path):
                # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à
                sha256_hash = hashlib.sha256()
                with open(zip_path, "rb") as f:
                    for chunk in iter(lambda: f.read(4096), b""):
                        sha256_hash.update(chunk)
                
                file_hash = sha256_hash.hexdigest()
                
                self.send_response(200)
                self.send_header('Content-Type', 'text/plain; charset=utf-8')
                self.end_headers()
                self.wfile.write(file_hash.encode('utf-8'))
                print(f"üîê –û—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ö–µ—à: {file_hash[:16]}...")
            else:
                self.send_response(500)
                self.send_header('Content-Type', 'text/plain')
                self.end_headers()
                self.wfile.write(b'Error creating test ZIP file')
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ZIP —Ñ–∞–π–ª–∞ –¥–ª—è —Ö–µ—à–∞")
        else:
            self.send_response(404)
            self.send_header('Content-Type', 'text/plain')
            self.end_headers()
            self.wfile.write(f'Not found: {self.path}'.encode('utf-8'))
            print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω: {self.path}")
    
    def create_test_zip(self):
        """–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π ZIP —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π ZIP —Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
            zip_path = Path(__file__).parent / "test_update.zip"
            
            # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
            if zip_path.exists():
                return str(zip_path)
            
            with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
                zip_file.writestr('update/app.exe', b'Test executable content for version 1.0.3')
                zip_file.writestr('update/config.ini', 
                                 '[Settings]\nversion=1.0.3\nupdate_date=2025-07-19\n')
                zip_file.writestr('update/data/example.txt', 
                                 '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.\n–í–µ—Ä—Å–∏—è: 1.0.3\n–î–∞—Ç–∞: 2025-07-19\n')
                zip_file.writestr('update/readme.txt', 
                                 '–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞–∫–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è\n–°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n–í–µ—Ä—Å–∏—è: 1.0.3')
                zip_file.writestr('update/changelog.txt', 
                                 '–°–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π v1.0.3:\n- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –æ—à–∏–±–∫–∏\n- –£–ª—É—á—à–µ–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å\n- –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏')
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π .reg —Ñ–∞–π–ª
                reg_content = '''Windows Registry Editor Version 5.00

[HKEY_CURRENT_USER\\Software\\PythonUpdater]
"Version"="1.0.3"
"LastUpdate"="2025-07-19"
"TestValue"="Registry updated successfully"

[HKEY_CURRENT_USER\\Software\\PythonUpdater\\Settings]
"AutoUpdate"=dword:00000001
"Theme"="default"
'''
                zip_file.writestr('update/registry_update.reg', reg_content.encode('utf-8'))
            
            print(f"üìÅ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π ZIP: {zip_path}")
            return str(zip_path)
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ZIP —Ñ–∞–π–ª–∞: {e}")
            return None
    
    def log_message(self, format, *args):
        """–£–±–∏—Ä–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ª–æ–≥–∏ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        pass


def main():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
    server_address = ('localhost', 8001)
    httpd = HTTPServer(server_address, SimpleUpdateServer)
    
    print("üöÄ " + "=" * 48 + " üöÄ")
    print("       –ü–†–û–°–¢–û–ô –¢–ï–°–¢–û–í–´–ô –°–ï–†–í–ï–† –û–ë–ù–û–í–õ–ï–ù–ò–ô")
    print("üöÄ " + "=" * 48 + " üöÄ")
    print("")
    print(f"üåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8001")
    print("")
    print("‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:")
    print("   üìù –¢–æ–∫–µ–Ω: test-token-123")
    print("   üìã URL –≤–µ—Ä—Å–∏–∏: http://localhost:8001/version.txt")
    print("   üì¶ URL –∑–∞–≥—Ä—É–∑–∫–∏: http://localhost:8001/myfile.zip")
    print("   üîê URL —Ö–µ—à–∞: http://localhost:8001/myfile.zip.sha256")
    print("")
    print("üì° –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    print("   üìÑ GET /version.txt ‚Üí –≤–µ—Ä—Å–∏—è 1.0.3")
    print("   üì¶ GET /myfile.zip ‚Üí —Ç–µ—Å—Ç–æ–≤—ã–π ZIP –∞—Ä—Ö–∏–≤")
    print("   üîê GET /myfile.zip.sha256 ‚Üí SHA256 —Ö–µ—à")
    print("")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    print("=" * 56)
    print("")
    
    try:
        httpd.serve_forever()
    except KeyboardInterrupt:
        print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        httpd.server_close()


if __name__ == '__main__':
    main()
